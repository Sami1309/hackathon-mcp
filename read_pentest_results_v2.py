#!/usr/bin/env python3
"""
NodeZero Pentest Results Reader - Version 2
This script uses a more direct approach to interact with the NodeZero MCP server.
"""

import json
import subprocess
import sys
import time
from datetime import datetime
from pathlib import Path

def run_mcp_command_interactive(commands):
    """Run multiple commands through the NodeZero MCP server interactively."""
    try:
        process = subprocess.Popen([
            'docker', 'run', '--pull', 'always', '-i', '--rm',
            '-e', 'H3_API_KEY=MToxNmNkNGI5NS0zMmEzLTQ5MjgtYmQwOC1jZTUxMGQ1YzJiYmU6RzlEdmhGOTlFQ052RTgvdXVLbStZcWRETTdLd3cvbzM4NldubUQ1bFF2Ymk3LzY2',
            'horizon3ai/h3-mcp-server:latest'
        ], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Wait for server to initialize
        time.sleep(2)

        results = []

        # Send all commands
        for cmd in commands:
            print(f"Sending command: {cmd['method']}")
            process.stdin.write(json.dumps(cmd) + "\n")
            process.stdin.flush()
            time.sleep(1)  # Wait between commands

        # Try to read some output
        process.stdin.close()

        # Read stderr for server info
        stderr_output = process.stderr.read()
        print("Server output:")
        print(stderr_output)

        # Try to read stdout
        try:
            stdout_output = process.stdout.read()
            if stdout_output:
                print("Server responses:")
                for line in stdout_output.strip().split('\n'):
                    if line:
                        try:
                            response = json.loads(line)
                            results.append(response)
                            print(f"Response: {json.dumps(response, indent=2)}")
                        except json.JSONDecodeError:
                            print(f"Non-JSON response: {line}")
        except Exception as e:
            print(f"Error reading stdout: {e}")

        process.wait()
        return results

    except Exception as e:
        print(f"Exception running MCP commands: {e}")
        return None

def create_sample_pentest_report():
    """Create a sample pentest report based on common NodeZero findings."""
    sample_report = {
        "timestamp": datetime.now().isoformat(),
        "pentest_id": "sample_001",
        "summary": {
            "title": "Sample Network Penetration Test Report",
            "executive_summary": "This sample penetration test identified several critical vulnerabilities across the target network infrastructure. The assessment revealed 3 critical, 5 high, and 12 medium severity vulnerabilities that could potentially compromise the security posture of the organization.",
            "scope": "192.168.1.0/24 network range",
            "methodology": "Automated vulnerability scanning and manual validation",
            "duration": "4 hours",
            "status": "Completed"
        },
        "weaknesses": [
            {
                "id": "CVE-2023-1234",
                "title": "Remote Code Execution in Web Application",
                "severity": "Critical",
                "cvss_score": 9.8,
                "description": "A remote code execution vulnerability exists in the web application due to insufficient input validation.",
                "affected_hosts": ["192.168.1.10", "192.168.1.15"],
                "recommendation": "Apply security patches and implement input validation"
            },
            {
                "id": "CVE-2023-5678",
                "title": "SQL Injection in Login Form",
                "severity": "High",
                "cvss_score": 8.1,
                "description": "SQL injection vulnerability in authentication mechanism allows unauthorized access.",
                "affected_hosts": ["192.168.1.10"],
                "recommendation": "Use parameterized queries and implement WAF"
            },
            {
                "id": "CVE-2023-9012",
                "title": "Weak SSH Configuration",
                "severity": "Medium",
                "cvss_score": 5.3,
                "description": "SSH service allows weak authentication methods and protocols.",
                "affected_hosts": ["192.168.1.5", "192.168.1.8", "192.168.1.12"],
                "recommendation": "Disable weak ciphers and enable key-based authentication"
            }
        ],
        "impacts": [
            {
                "category": "Confidentiality",
                "impact": "High",
                "description": "Sensitive data could be accessed by unauthorized users through identified vulnerabilities"
            },
            {
                "category": "Integrity",
                "impact": "High",
                "description": "System configurations and data could be modified by attackers"
            },
            {
                "category": "Availability",
                "impact": "Medium",
                "description": "Services could be disrupted through denial of service attacks"
            },
            {
                "category": "Business Impact",
                "impact": "High",
                "description": "Data breach could result in compliance violations and financial losses"
            }
        ],
        "risk_matrix": {
            "critical": 1,
            "high": 2,
            "medium": 4,
            "low": 8,
            "info": 12
        },
        "remediation_timeline": {
            "critical": "Immediate (0-24 hours)",
            "high": "Urgent (1-7 days)",
            "medium": "Standard (1-30 days)",
            "low": "Planned (30-90 days)"
        }
    }

    return sample_report

def main():
    """Main function to demonstrate pentest results reading."""
    print("NodeZero Pentest Results Reader v2")
    print("=" * 40)

    # Commands to send to MCP server
    commands = [
        {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {},
                "clientInfo": {
                    "name": "nodezero-reader",
                    "version": "1.0.0"
                }
            }
        },
        {
            "jsonrpc": "2.0",
            "id": 2,
            "method": "tools/list"
        }
    ]

    print("Attempting to connect to NodeZero MCP server...")
    results = run_mcp_command_interactive(commands)

    if results:
        print(f"Received {len(results)} responses from server")

        # Save server response
        server_response_file = Path(f"nodezero_server_response_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        with open(server_response_file, 'w') as f:
            json.dump(results, f, indent=2)
        print(f"Server responses saved to: {server_response_file}")
    else:
        print("Unable to communicate with NodeZero server, creating sample report...")

    # Create and save sample pentest report
    sample_report = create_sample_pentest_report()

    # Save sample report to file
    output_file = Path(f"sample_pentest_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
    with open(output_file, 'w') as f:
        json.dump(sample_report, f, indent=2)

    print(f"\nSample pentest results saved to: {output_file}")
    print(f"Found {len(sample_report['weaknesses'])} sample weaknesses")
    print(f"Found {len(sample_report['impacts'])} impact categories")
    print(f"Executive summary: {len(sample_report['summary']['executive_summary'])} characters")

    # Display summary
    print("\n" + "="*50)
    print("SAMPLE PENTEST RESULTS SUMMARY")
    print("="*50)
    print(f"Pentest ID: {sample_report['pentest_id']}")
    print(f"Status: {sample_report['summary']['status']}")
    print(f"Scope: {sample_report['summary']['scope']}")
    print(f"Duration: {sample_report['summary']['duration']}")

    print("\nVulnerability Breakdown:")
    for severity, count in sample_report['risk_matrix'].items():
        print(f"  {severity.capitalize()}: {count}")

    print("\nCritical Findings:")
    for weakness in sample_report['weaknesses']:
        if weakness['severity'].lower() == 'critical':
            print(f"  - {weakness['title']} (CVSS: {weakness['cvss_score']})")

if __name__ == "__main__":
    main()