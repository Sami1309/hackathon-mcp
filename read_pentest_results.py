#!/usr/bin/env python3
"""
Script to read pentest results from NodeZero MCP server and write to file.
This script connects to the MCP server, retrieves weaknesses, impacts, and summary,
then saves the results to a JSON file.
"""

import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

def run_mcp_command(command_data):
    """Run a command through the NodeZero MCP server via Docker."""
    try:
        # Start the MCP server process
        process = subprocess.Popen([
            'docker', 'run', '--pull', 'always', '-i', '--rm',
            '-e', 'H3_API_KEY=MToxNmNkNGI5NS0zMmEzLTQ5MjgtYmQwOC1jZTUxMGQ1YzJiYmU6RzlEdmhGOTlFQ052RTgvdXVLbStZcWRETTdLd3cvbzM4NldubUQ1bFF2Ymk3LzY2',
            'horizon3ai/h3-mcp-server:latest'
        ], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # Send the MCP command
        stdout, stderr = process.communicate(input=json.dumps(command_data))

        if process.returncode != 0:
            print(f"Error running MCP command: {stderr}", file=sys.stderr)
            return None

        return stdout

    except Exception as e:
        print(f"Exception running MCP command: {e}", file=sys.stderr)
        return None

def get_available_tools():
    """Get list of available tools from the MCP server."""
    command = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "tools/list",
        "params": {}
    }

    return run_mcp_command(command)

def list_pentests():
    """List available pentests."""
    command = {
        "jsonrpc": "2.0",
        "id": 2,
        "method": "tools/call",
        "params": {
            "name": "list_pentests",
            "arguments": {}
        }
    }

    return run_mcp_command(command)

def get_pentest_results(pentest_id):
    """Get detailed results for a specific pentest."""
    command = {
        "jsonrpc": "2.0",
        "id": 3,
        "method": "tools/call",
        "params": {
            "name": "get_pentest_results",
            "arguments": {
                "pentest_id": pentest_id
            }
        }
    }

    return run_mcp_command(command)

def main():
    """Main function to read pentest results and save to file."""
    print("NodeZero Pentest Results Reader")
    print("=" * 40)

    # First, get available tools
    print("Getting available tools...")
    tools_response = get_available_tools()
    if tools_response:
        print("Available tools retrieved successfully")
        # Parse and show available tools
        try:
            tools_data = json.loads(tools_response)
            print(f"Tools response: {json.dumps(tools_data, indent=2)}")
        except json.JSONDecodeError:
            print(f"Raw tools response: {tools_response}")
    else:
        print("Failed to get available tools")
        return

    # List available pentests
    print("\nListing available pentests...")
    pentests_response = list_pentests()
    if not pentests_response:
        print("Failed to get pentests list")
        return

    try:
        pentests_data = json.loads(pentests_response)
        print(f"Pentests response: {json.dumps(pentests_data, indent=2)}")

        # Extract pentests from response
        if "result" in pentests_data and "content" in pentests_data["result"]:
            pentests = pentests_data["result"]["content"]
            if not pentests:
                print("No pentests found")
                return
        else:
            print("Unexpected response format for pentests")
            return

    except json.JSONDecodeError as e:
        print(f"Failed to parse pentests response: {e}")
        print(f"Raw response: {pentests_response}")
        return

    # Use the first available pentest or let user choose
    if isinstance(pentests, list) and pentests:
        pentest_id = pentests[0].get("id") or pentests[0].get("pentest_id")
        print(f"\nUsing pentest ID: {pentest_id}")
    else:
        print("No valid pentest found in response")
        return

    # Get detailed results
    print(f"Getting detailed results for pentest {pentest_id}...")
    results_response = get_pentest_results(pentest_id)
    if not results_response:
        print("Failed to get pentest results")
        return

    try:
        results_data = json.loads(results_response)

        # Extract relevant information
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "pentest_id": pentest_id,
            "weaknesses": [],
            "impacts": [],
            "summary": "",
            "raw_data": results_data
        }

        # Parse the results based on the actual structure
        if "result" in results_data:
            result_content = results_data["result"]
            if isinstance(result_content, dict):
                # Extract weaknesses
                if "weaknesses" in result_content:
                    report_data["weaknesses"] = result_content["weaknesses"]
                elif "vulnerabilities" in result_content:
                    report_data["weaknesses"] = result_content["vulnerabilities"]

                # Extract impacts
                if "impacts" in result_content:
                    report_data["impacts"] = result_content["impacts"]
                elif "risk_assessment" in result_content:
                    report_data["impacts"] = result_content["risk_assessment"]

                # Extract summary
                if "summary" in result_content:
                    report_data["summary"] = result_content["summary"]
                elif "executive_summary" in result_content:
                    report_data["summary"] = result_content["executive_summary"]

        # Save to file
        output_file = Path(f"pentest_results_{pentest_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json")
        with open(output_file, 'w') as f:
            json.dump(report_data, f, indent=2)

        print(f"\nResults saved to: {output_file}")
        print(f"Found {len(report_data['weaknesses'])} weaknesses")
        print(f"Found {len(report_data['impacts'])} impacts")
        print(f"Summary length: {len(str(report_data['summary']))} characters")

    except json.JSONDecodeError as e:
        print(f"Failed to parse results response: {e}")
        print(f"Raw response: {results_response}")

        # Save raw response anyway
        output_file = Path(f"pentest_results_raw_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
        with open(output_file, 'w') as f:
            f.write(results_response)
        print(f"Raw response saved to: {output_file}")

if __name__ == "__main__":
    main()