#!/usr/bin/env python3
"""
NodeZero Pentest Starter & Log Streamer - Version 2
This script simulates starting a pentest and streaming logs with sample data.
"""

import json
import time
import threading
from datetime import datetime, timedelta
from pathlib import Path
import random

class PentestSimulator:
    """Simulate a pentest with realistic progression and logs."""

    def __init__(self, target="192.168.1.0/24"):
        self.target = target
        self.pentest_id = f"pentest_{int(time.time())}"
        self.start_time = datetime.now()
        self.status = "starting"
        self.progress = 0
        self.logs = []
        self.findings = []

        # Predefined log messages for realistic simulation
        self.log_templates = [
            "Starting network discovery scan on {target}",
            "Discovered {count} active hosts",
            "Beginning port scan on discovered hosts",
            "Found {count} open ports across all hosts",
            "Starting vulnerability assessment",
            "Testing for common web vulnerabilities",
            "Checking for SSL/TLS misconfigurations",
            "Scanning for default credentials",
            "Analyzing service versions for known CVEs",
            "Testing network segmentation",
            "Checking for privilege escalation vectors",
            "Validating discovered vulnerabilities",
            "Critical vulnerability found: {vuln}",
            "High severity issue detected: {vuln}",
            "Medium risk vulnerability identified: {vuln}",
            "Generating comprehensive report",
            "Pentest completed successfully"
        ]

        self.vulnerabilities = [
            "Remote Code Execution in Apache Struts",
            "SQL Injection in authentication form",
            "Cross-Site Scripting (XSS) vulnerability",
            "Weak SSH configuration detected",
            "Unpatched Windows SMB service",
            "Default credentials on admin panel",
            "Directory traversal vulnerability",
            "Insecure direct object reference",
            "Missing security headers",
            "Weak SSL/TLS cipher suites"
        ]

    def add_log(self, message):
        """Add a log entry with timestamp."""
        timestamp = datetime.now()
        log_entry = {
            "timestamp": timestamp.isoformat(),
            "message": message,
            "level": "INFO"
        }
        self.logs.append(log_entry)
        return log_entry

    def simulate_pentest_progression(self):
        """Simulate realistic pentest progression with logs."""
        stages = [
            ("starting", "Network Discovery", 5, 10),
            ("discovery", "Port Scanning", 15, 20),
            ("scanning", "Vulnerability Assessment", 40, 50),
            ("testing", "Exploitation Testing", 70, 80),
            ("validating", "Validation & Verification", 90, 95),
            ("reporting", "Report Generation", 98, 100),
            ("completed", "Completed", 100, 100)
        ]

        for stage_name, stage_desc, progress_start, progress_end in stages:
            self.status = stage_name
            self.add_log(f"Stage: {stage_desc}")

            # Simulate progress within stage
            current_progress = progress_start
            while current_progress < progress_end:
                self.progress = current_progress

                # Add stage-specific logs
                if stage_name == "discovery":
                    if random.random() < 0.3:
                        host_count = random.randint(5, 25)
                        self.add_log(f"Discovered {host_count} active hosts in network")

                elif stage_name == "scanning":
                    if random.random() < 0.4:
                        port_count = random.randint(10, 50)
                        self.add_log(f"Found {port_count} open ports on current host")

                elif stage_name == "testing":
                    if random.random() < 0.2:
                        vuln = random.choice(self.vulnerabilities)
                        severity = random.choice(["Critical", "High", "Medium"])
                        self.add_log(f"{severity} vulnerability found: {vuln}")
                        self.findings.append({"vulnerability": vuln, "severity": severity})

                elif stage_name == "validating":
                    if random.random() < 0.3:
                        self.add_log("Validating exploitability of discovered vulnerabilities")

                current_progress += random.randint(2, 8)
                time.sleep(random.uniform(0.5, 2.0))  # Realistic timing

        self.status = "completed"
        self.progress = 100
        self.add_log("Pentest completed successfully")

    def get_status(self):
        """Get current pentest status."""
        return {
            "pentest_id": self.pentest_id,
            "status": self.status,
            "progress": self.progress,
            "target": self.target,
            "start_time": self.start_time.isoformat(),
            "elapsed_time": str(datetime.now() - self.start_time),
            "findings_count": len(self.findings)
        }

    def get_logs(self):
        """Get all current logs."""
        return self.logs.copy()

def stream_pentest_logs(simulator, log_file):
    """Stream logs from the pentest simulator."""
    print(f"\nStreaming logs for pentest {simulator.pentest_id}...")
    print("=" * 60)

    last_log_count = 0

    # Initialize log file
    with open(log_file, 'w') as f:
        f.write(f"NodeZero Pentest Log Stream\n")
        f.write(f"Pentest ID: {simulator.pentest_id}\n")
        f.write(f"Target: {simulator.target}\n")
        f.write(f"Started: {simulator.start_time.isoformat()}\n")
        f.write("=" * 50 + "\n\n")

    while simulator.status != "completed":
        try:
            # Get current status
            status = simulator.get_status()
            print(f"[{datetime.now().strftime('%H:%M:%S')}] Status: {status['status']} - Progress: {status['progress']}%")

            # Get new logs
            current_logs = simulator.get_logs()
            if len(current_logs) > last_log_count:
                new_logs = current_logs[last_log_count:]

                for log_entry in new_logs:
                    log_line = f"[{log_entry['timestamp']}] {log_entry['level']}: {log_entry['message']}"
                    print(f"  {log_line}")

                    # Write to file
                    with open(log_file, 'a') as f:
                        f.write(log_line + "\n")

                last_log_count = len(current_logs)

            time.sleep(2)  # Check every 2 seconds

        except KeyboardInterrupt:
            print("\nStopping log streaming...")
            break
        except Exception as e:
            print(f"Error streaming logs: {e}")

    # Final status
    final_status = simulator.get_status()
    print(f"\n{'-'*60}")
    print(f"PENTEST COMPLETED")
    print(f"{'-'*60}")
    print(f"Pentest ID: {final_status['pentest_id']}")
    print(f"Status: {final_status['status']}")
    print(f"Total Time: {final_status['elapsed_time']}")
    print(f"Findings: {final_status['findings_count']} vulnerabilities discovered")

    # Write final summary to log file
    with open(log_file, 'a') as f:
        f.write(f"\n{'-'*50}\n")
        f.write(f"PENTEST COMPLETED\n")
        f.write(f"Final Status: {final_status['status']}\n")
        f.write(f"Total Duration: {final_status['elapsed_time']}\n")
        f.write(f"Total Findings: {final_status['findings_count']}\n")

def main():
    """Main function to start pentest simulation and stream logs."""
    print("NodeZero Pentest Starter & Log Streamer v2")
    print("=" * 50)

    # Get target from user or use default
    target = input("Enter target (default: 192.168.1.0/24): ").strip()
    if not target:
        target = "192.168.1.0/24"

    print(f"\nStarting simulated pentest against: {target}")

    # Create simulator
    simulator = PentestSimulator(target)

    # Set up log file
    log_file = Path(f"pentest_logs_{simulator.pentest_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt")
    print(f"Logs will be saved to: {log_file}")

    # Start pentest simulation in background thread
    pentest_thread = threading.Thread(target=simulator.simulate_pentest_progression)
    pentest_thread.daemon = True
    pentest_thread.start()

    # Stream logs in main thread
    try:
        stream_pentest_logs(simulator, log_file)
    except KeyboardInterrupt:
        print("\nOperation interrupted by user")

    # Save final results
    final_results = {
        "pentest_summary": simulator.get_status(),
        "all_logs": simulator.get_logs(),
        "findings": simulator.findings
    }

    results_file = Path(f"pentest_results_{simulator.pentest_id}.json")
    with open(results_file, 'w') as f:
        json.dump(final_results, f, indent=2)

    print(f"\nFinal results saved to: {results_file}")
    print(f"Logs saved to: {log_file}")

if __name__ == "__main__":
    main()